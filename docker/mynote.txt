yum install docker -y
systemctl enable docker 
systemctl restart docker 
#docker inspect <containerid>
Attaching and executing commands inside the container 
docker run -ti centos /bin/bash 
ctrl+p to comeout of container with out killing it
#docker exec -it <containerid> /bin/bash -c "uptime;df -hT"
		
Building our own images or Image customization.
		#docker commit <containerid> <imagename>
		#docker build -t "imagename" . 
Dockerfile :
FROM centos
RUN yum install telnet -y && useradd devops
		
exec
# docker exec -it <containerid> /bin/bash -c "uptime"
RUN
ENV
ADD
COPY
USER
EXPOSE
PORTFORWARD
VOLUME(Storage management)
CMD
ENTRYPOINT


FROM centos
RUN yum install telnet nginx -y && useradd test1
ENV myenv=100
ADD tmp.tar /tmp/
COPY tmp.tar /tmp/
EXPOSE 80
VOLUME ["/usr/share/nginx/html"]
CMD ["nginx", "-g", "daemon off;"]
		
docker run -d --name mynginx -v /mydata:/usr/share/nginx/html/ -p 80:80 mynginx:v1
"if we provide /bin/bash at the end of the abvoe line, it replaces the command in the docker file and container exits once created."

CMD and ENTRYPOINT

Categories of data storage:


Non-persistent Data ::

By default all the containers uses local storage. Default location for the containers are as follows.

Storage locations:

Linux: /var/lib/docker/[STORAGE-DRIVER]/
Windows: C:\ProgramData\Docker\windowsfilter\

In each and every OS there will be default storage drivers which helps contaniers for their consumption.

Storage Drivers:

	RHEL uses overlay2.
	Ubuntu uses overlay2 or aufs.
	SUSE uses btrfs.
	Windows uses its own.
	
Persistent Data Using Volumes ::

Volume Commands:

docker volume ls 
docker volume create myvol1
docker volume inspect myvol1


/usr/share/nginx/html is the default directory for nginx. 

man docker-network-create

gateway 10.1.0.1
ip-range=10.1.4.0/24
subnet 10.1.0.0/16
		
docker run -idt --name mynet1 --net devops --ip 10.1.4.5 centos /bin/bash
docker run -idt --name mynet1 --net devops --ip 10.1.4.5 centos /bin/bash

	

docker rm -f <containerid> 
docker rmi -f <imageid>
		
docker save -o myimage.tar mycustom
docker load -i myimage.tar
	
2nd Way via Dockerhub:	


Examples ::

--> Create the base image for apache 

FROM centos:7
RUN yum install httpd -y
EXPOSE 80
VOLUME ["/var/www/html"]
CMD ["/usr/sbin/httpd","-D","FOREGROUND"]


app1 --> port forwarded to 8081 --> mounted to volume /myapplication
app2 --> port forwarded to 8082 --> mounted to volume /myapplication

wget -O /tmp/evolo.zip https://www.free-css.com/assets/files/free-css-templates/download/page257/evolo.zip
unzip -d /myapplication/ /tmp/evolo.zip
cd /myapplication
mv web/* .
rm -rf web

docker run -d --name app2 -p 8082:80 -v /myapplication:/var/www/html myapp:v1
docker run -d --name app1 -p 8081:80 -v /myapplication:/var/www/html myapp:v1


amazon-linux-extras install nginx1.12 -y
systemctl enable nginx
systemctl restart nginx

Configure:

vim /etc/nginx/conf.d/default.conf
        
upstream containerapp {
        server 54.149.202.98:8081;
        server 54.149.202.98:8082;
}

server {
        listen *:80;

        server_name 54.149.202.98;
        index index.html index.htm index.php;

        access_log /var/log/nginx/localweb.log;
        error_log /var/log/nginx/localerr.log;

        location / {
                proxy_pass http://containerapp;
        }
}
systemctl restart nginx


2. Migrating on prem Java Based applications to Microservices ::

Installing Java:

yum install java-1.8.0-openjdk-devel -y

export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk

Make the variable permenent make sure you are having below content in ~/.bashrc file

export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
export PATH=$PATH:$JAVA_HOME
refresh file- source ~/.bashrc

Installing maven :

all the mvn release in the below link

mvn mirrors:
http://mirror.olnevhost.net/pub/apache/maven/binaries/

export Mvn_Version=3.6.3
wget https://downloads.apache.org/maven/maven-3/${Mvn_Version}/binaries/apache-maven-${Mvn_Version}-bin.tar.gz
tar xvfz apache-maven-${Mvn_Version}-bin.tar.gz
mkdir /usr/local/apache-maven/apache-maven-${Mvn_Version} -p
mv apache-maven-${Mvn_Version}/* /usr/local/apache-maven/apache-maven-${Mvn_Version}/
export M2_HOME=/usr/local/apache-maven/apache-maven-${Mvn_Version}
export M2="${M2_HOME}/bin"
export PATH=$PATH:$M2

Make them permenent by adding them to ~/.bashrc file
mvn -version

Installing Tomcat:

mkdir /opt/tomcat/ -p
export Tomcat_Version=8.5.56
wget http://www-eu.apache.org/dist/tomcat/tomcat-8/v${Tomcat_Version}/bin/apache-tomcat-${Tomcat_Version}.tar.gz
tar xvfz apache-tomcat-${Tomcat_Version}.tar.gz
mv apache-tomcat-${Tomcat_Version}.tar.gz /tmp/
mv apache-tomcat-${Tomcat_Version}/* /opt/tomcat/.
cd /opt/tomcat/webapps/manager/META-INF/


Replace context.xml file with the below data.

<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Context antiResourceLocking="false" privileged="true" >
  <Manager sessionAttributeValueClassNameFilter="java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap"/>
</Context>

Replace tomcat users with below content & change the password
cd /opt/tomcat/conf/

[root@ip-172-31-16-183 tomcat]# cat tomcat-users.xml
<tomcat-users>
<!--
  <role rolename="tomcat"/>
  <role rolename="role1"/>
  <user username="tomcat" password="tomcat" roles="tomcat"/>
  <user username="both" password="tomcat" roles="tomcat,role1"/>
  <user username="role1" password="tomcat" roles="role1"/>
-->

                <role rolename="manager-gui"/>
                <role rolename="manager-script"/>
                <user username="sumanth" password="sumanth" roles="manager-gui,manager-script"/>

</tomcat-users>

4. once done check the tomcat with the below command.

/opt/tomcat/bin/catalina.sh run

5. Now lets clone our code and build the artifacts.

yum install git -y
git clone https://github.com/esumanth/webapp.git
cd myweb/
mvn clean install
deploy to tomcat

[root@ip-172-31-93-176 target]# pwd
/root/myweb/target
[root@ip-172-31-93-176 myweb]# cd target/
[root@ip-172-31-93-176 target]# ls -l *.war
-rw-r--r-- 1 root root 3058508 Jan  1 13:59 myweb-0.12.0.war

cp myweb-0.12.0.war /opt/tomcat/webapps/
/opt/tomcat/bin/catalina.sh run

migrate service to microservices

before you run docker build command.

download the latest maven release
make sure you have context.xml & tomcat-users.xml files
clone the mywebcode
Or else download the entire code from 

"https://github.com/shan5a6/javaDockerDeployment.git"

Base Image for the infrastructure ::

Dockerfile ::

FROM centos:7
# Installing Java
ENV JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
ENV PATH=$PATH:$JAVA_HOME
RUN yum install java-1.8.0-openjdk-devel wget -y
EXPOSE 8080

# Installing Maven
ENV Mvn_Version=3.6.3 
ENV M2_HOME=/usr/local/apache-maven/apache-maven-${Mvn_Version}
ENV M2="${M2_HOME}/bin"
ENV PATH=$PATH:$M2
    
RUN wget https://downloads.apache.org/maven/maven-3/${Mvn_Version}/binaries/apache-maven-${Mvn_Version}-bin.tar.gz && \
    tar xvfz apache-maven-${Mvn_Version}-bin.tar.gz && \
    mkdir /usr/local/apache-maven/apache-maven-${Mvn_Version} -p && \
    mv apache-maven-${Mvn_Version}/* /usr/local/apache-maven/apache-maven-${Mvn_Version}/


# Installing and configuring Tomcat

ENV Tomcat_Version=8.5.54
RUN 	wget http://www-eu.apache.org/dist/tomcat/tomcat-8/v${Tomcat_Version}/bin/apache-tomcat-${Tomcat_Version}.tar.gz && \
	tar xvfz apache-tomcat-${Tomcat_Version}.tar.gz && \
        mkdir -p /opt/tomcat/ /opt/myapplication/ -p && \
	mv apache-tomcat-${Tomcat_Version}.tar.gz /tmp/ && \
	mv apache-tomcat-${Tomcat_Version}/* /opt/tomcat/. 
COPY context.xml /opt/tomcat/webapps/manager/META-INF/	
COPY tomcat-users.xml /opt/tomcat/conf/
CMD ["/opt/tomcat/bin/catalina.sh", "run"]

Application Image for developers ::

Dockerfile ::

FROM myappbaseimage
WORKDIR /opt/myapplication
RUN yum install git -y \
        && git clone https://github.com/shan5a6/myweb.git /opt/myapplication \
        && mvn clean install \
        && mv ./target/myweb*.war /opt/tomcat/webapps/app.war
CMD ["/opt/tomcat/bin/catalina.sh", "run"]

Multi Stage Docker Builds ::

FROM centos:7 as build
# Installing Java
ENV JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
ENV PATH=$PATH:$JAVA_HOME
RUN yum install java-1.8.0-openjdk-devel wget -y


# Installing Maven
ENV Mvn_Version=3.6.3
ENV M2_HOME=/usr/local/apache-maven/apache-maven-${Mvn_Version}
ENV M2="${M2_HOME}/bin"
ENV PATH=$PATH:$M2

RUN wget https://downloads.apache.org/maven/maven-3/${Mvn_Version}/binaries/apache-maven-${Mvn_Version}-bin.tar.gz && \
    tar xvfz apache-maven-${Mvn_Version}-bin.tar.gz && \
    mkdir /usr/local/apache-maven/apache-maven-${Mvn_Version} /opt/myapplication/ -p && \
    mv apache-maven-${Mvn_Version}/* /usr/local/apache-maven/apache-maven-${Mvn_Version}/
COPY myweb/ /opt/myapplication/
WORKDIR /opt/myapplication/
RUN mvn clean install 

# Installing and configuring Tomcat
FROM centos:7
EXPOSE 8080
ENV Tomcat_Version=8.5.54

RUN yum install java-1.8.0-openjdk-devel wget -y

RUN     wget http://www-eu.apache.org/dist/tomcat/tomcat-8/v${Tomcat_Version}/bin/apache-tomcat-${Tomcat_Version}.tar.gz && \
        tar xvfz apache-tomcat-${Tomcat_Version}.tar.gz && \
        mkdir -p /opt/tomcat/ /opt/myapplication/ -p && \
        mv apache-tomcat-${Tomcat_Version}.tar.gz /tmp/ && \
        mv apache-tomcat-${Tomcat_Version}/* /opt/tomcat/.
COPY context.xml /opt/tomcat/webapps/manager/META-INF/
COPY tomcat-users.xml /opt/tomcat/conf/
COPY --from=build /opt/myapplication/target/myweb-0.12.0.war /opt/tomcat/webapps/myapp.war
CMD ["/opt/tomcat/bin/catalina.sh", "run"]





